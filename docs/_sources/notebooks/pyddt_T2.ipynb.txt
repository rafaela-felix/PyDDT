{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7aa81dbc",
   "metadata": {},
   "source": [
    "# Structural modeling and experiment planning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b385d3c",
   "metadata": {},
   "source": [
    "What are the accessible structural details of a given system by phase measurements? How to perform data acquisition? Identifying proper experimental conditions is fundamental for successfully exploiting the X-ray dynamical diffraction (in its current conception).\n",
    "\n",
    "Our approach for identifying those suitable multiple-diffraction cases is by elaborating structural models and comparing their structure factor phases. So, this step-by-step tutorial will show you how to use **pyddt** to perform these tasks."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe3434c",
   "metadata": {},
   "source": [
    "## CeFe$_{4}$P$_{12}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32611247",
   "metadata": {},
   "source": [
    "For illustrative purposes, let's consider the filled skutterudite CeFe$_{4}$P$_{12}$ and search for suitable experimental conditions to resolve the Ce oxidation state. Download its CIF on [Materials Project mp-16272](https://materialsproject.org/materials/mp-16272/).\n",
    "\n",
    "This tutorial aims to show the experiment planning performed by Morelh√£o, S. et al. during the investigation of vibrational dynamics of filled skutterudites. See [Phonon scattering mechanism in thermoelectric materials revised via resonant x-ray dynamical diffraction](https://link.springer.com/article/10.1557/mrc.2020.37) for a detailed reference."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "846f9dfa",
   "metadata": {},
   "source": [
    "### 0. Importing packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d6c6d7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5cdf1ef1f3a04ae1beb4d5364a74773b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.rcParams['font.size'] = '14'\n",
    "\n",
    "import sys\n",
    "sys.path.append('/home/rafaela/doutorado/pyddt')\n",
    "\n",
    "import pyddt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ec905e5",
   "metadata": {},
   "source": [
    "## 1. Structural modelling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe9640c",
   "metadata": {},
   "source": [
    "The structural modeling within **pyddt** is based on the `Structure` class. \n",
    "\n",
    "So, in a few words, it follows what we will do in this section: after converting the CIF into a *.in* file, we will instantiate a structure. Then, carry out the desired changes in the unit cell (replace the atoms with ions, vary their B-factors) and save the resultant models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42e87098",
   "metadata": {},
   "source": [
    "### 1.1 Converting CIF into .in file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "590fda76",
   "metadata": {},
   "outputs": [],
   "source": [
    "pyddt.to_in('Ce(FeP3)4.cif')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ca1d94",
   "metadata": {},
   "source": [
    "### 1.2 Structure object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05b00707",
   "metadata": {},
   "source": [
    "It's easy to generate a `structure` object from the *.in* file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5087ffe9",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp = pyddt.Structure('Ce(FeP3)4.in')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c6fe15f",
   "metadata": {},
   "source": [
    "Let's check the current oxidation states and B-factors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "895aef2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ce', 'Ce', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'Fe', 'P',\n",
       "       'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',\n",
       "       'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], dtype='<U32')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfp.atoms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa671aa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfp.bfactors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62fee2f2",
   "metadata": {},
   "source": [
    "Now, we will generate two simple models from this `structure` object: one presenting Ce$^{3+}$ and the other Ce$^{4+}$. Both including Fe$^{2+}$, P$^{1-}$, and all atomic displacements equal to 0.1 $\\mathring{A}$ $\\rightarrow$ $B = 0.7896\\;\\mathring{A}$$^{2}$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44de2705",
   "metadata": {},
   "source": [
    "#### 1.2.1 Varying the B-factors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a05dd1e",
   "metadata": {},
   "source": [
    "Let's start by changing all B-factors. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "524a19c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp.replace_bfactor(':', 0.7896)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07f59e7d",
   "metadata": {},
   "source": [
    "The first argument is the indices of B-factors to be replaced, while the second is the new value. In this case, we replace simultaneously all B-factors using `':'`. As a sanity check, verify the current values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e965bfc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896,\n",
       "       0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896,\n",
       "       0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896,\n",
       "       0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896, 0.7896,\n",
       "       0.7896, 0.7896])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfp.bfactors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4ebd1fb",
   "metadata": {},
   "source": [
    "#### 1.2.2 Replacing Fe and P atoms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67b08adc",
   "metadata": {},
   "source": [
    "The procedure for replacing the atoms with the desired ions is very similar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "895e590d",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp.replace_ion('Fe', 'Fe2+')\n",
    "cfp.replace_ion('P', 'P1-')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a5a432f",
   "metadata": {},
   "source": [
    "We said for **pyddt** to replace all `'Fe'` atoms with `'Fe2+'` ions, and the corresponding for phosphorous. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "82c0e4ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ce', 'Ce', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+',\n",
       "       'Fe2+', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-'], dtype='<U32')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfp.atoms  # Sanity check"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ba8ee1d",
   "metadata": {},
   "source": [
    "#### 1.2.3 Ce oxidation state"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df5a64a4",
   "metadata": {},
   "source": [
    "Now, we will change the Ce atom to Ce$^{3+}$ and save this structural model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9fbfc6b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp.replace_ion('Ce', 'Ce3+')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d5e2d749",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ce3+', 'Ce3+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+',\n",
       "       'Fe2+', 'Fe2+', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-'],\n",
       "      dtype='<U32')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfp.atoms  # Sanity check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1dde362a",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp.save_infile('ce3.in')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f78d03ef",
   "metadata": {},
   "source": [
    "The structural model `ce3.in` is saved in the current folder. Check this file. Are the ions and B-factors correct? If not, review this tutorial from section 1.2.\n",
    "\n",
    "By the end, replaces the Ce$^{3+}$ ion with Ce$^{4+}$ and save the other structural model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8bcf638f",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp.replace_ion('Ce3+', 'Ce4+')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "71b7073a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ce4+', 'Ce4+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+',\n",
       "       'Fe2+', 'Fe2+', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-'],\n",
       "      dtype='<U32')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfp.atoms  # Sanity check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3b38f7a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "cfp.save_infile('ce4.in')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03d81fb1",
   "metadata": {},
   "source": [
    "Again, it's highly recommend that you check the saved model before proceeding. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42e8114f",
   "metadata": {},
   "source": [
    "## 2. Experiment planning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c002141",
   "metadata": {},
   "source": [
    "We have generated two structural models by changing the Ce valence from 3+ to 4+. Now, it is necessary to search for structure factors with phases susceptible to this change in the models. \n",
    "\n",
    "The function `pyddt.phase()` finds the susceptible cases from the structure factor list of both models. As we see in the previous tutorial, the structure factor list is obtained after creating `crystal` objects."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba359885",
   "metadata": {},
   "source": [
    "### 2.1 Crystal objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a47530f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "ce3 = pyddt.Crystal('ce3.in')\n",
    "ce4 = pyddt.Crystal('ce4.in')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc03d81",
   "metadata": {},
   "source": [
    "Check if the created objects have the expected valence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "00847a9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ce3+', 'Ce3+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+',\n",
       "       'Fe2+', 'Fe2+', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-'],\n",
       "      dtype='<U32')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ce3.structure.atoms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1e6239f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ce4+', 'Ce4+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+', 'Fe2+',\n",
       "       'Fe2+', 'Fe2+', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-',\n",
       "       'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-', 'P1-'],\n",
       "      dtype='<U32')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ce4.structure.atoms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d9ca37f",
   "metadata": {},
   "source": [
    "### 2.2 Phase comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68284e8c",
   "metadata": {},
   "source": [
    "For now, let's consider X-rays of 7100 eV and perform the comparison of structure factor phases. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e4dc834e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "E = 7100  # eV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ca4a935",
   "metadata": {},
   "outputs": [],
   "source": [
    "pyddt.phase(ce3.diffraction(E), ce4.diffraction(E), 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d62a9f4e",
   "metadata": {},
   "source": [
    "![pyddt_t2_1](https://user-images.githubusercontent.com/106104347/187934482-f32cb04b-e819-4296-94dc-8f1820d6e054.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c076fdce",
   "metadata": {},
   "source": [
    "The result is an interactive plot with the hover text presenting the Miller indices. All plotted information was saved in the current folder (filename displayed on the screen).\n",
    "\n",
    "The vertical axis presents the phase difference, so 002 is the best reflection for phase measurements."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f5ea2f5",
   "metadata": {},
   "source": [
    "### 2.2 Optimum resonance condition"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3513f9db",
   "metadata": {},
   "source": [
    "In the previous tutorial, we calculated the Fe resonance amplitude near its absorption edge, and characteristic \"jumps\" are noted. How does it influence the structure factor phase? \n",
    "\n",
    "To check this, let's calculate the phase of 002 as a function of energy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f7eec856",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "E = np.linspace(7000, 7300, 2000)  # eV\n",
    "\n",
    "fig = plt.figure(figsize=(7, 5))\n",
    "\n",
    "plt.plot(E, np.angle(ce3.Fhkl(E, [0, 0, 2]))*180/np.pi, label='Ce3+')\n",
    "plt.plot(E, np.angle(ce4.Fhkl(E, [0, 0, 2]))*180/np.pi, label='Ce4+')\n",
    "\n",
    "plt.xlabel('Energy (eV)')\n",
    "plt.ylabel('Phase (deg)')\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71bf6c43",
   "metadata": {},
   "source": [
    "Although the phase difference between the structural models is less than 10 degrees, the phase shift can be at 180¬∞ for just 100 eV of variation in the X-ray energy. This phenomenon allowed a multi-wavelength use of X-ray dynamical diffraction exploited by [Morelh√£o, S. et al](https://link.springer.com/article/10.1557/mrc.2020.37)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87a1ab33",
   "metadata": {},
   "source": [
    "### 2.3 Phase triplets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80a2a5a3",
   "metadata": {},
   "source": [
    "Until now, we selected the 002 as the primary reflection and might acquire data using X-rays in the range of 7100 and 7200 eV. \n",
    "\n",
    "Lastly, check the three-beam cases predicted to show opposite profile asymmetries on each model structure for a fixed energy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27f9a7b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "E = 7150\n",
    "pyddt.triplet(ce3.diffraction(E), ce4.diffraction(E), [0, 0, 2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cd2f7ca",
   "metadata": {},
   "source": [
    "![pyddt_t2_2](https://user-images.githubusercontent.com/106104347/187935676-81303ffe-6583-427a-b885-d1ad713afd0f.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b68031e2",
   "metadata": {},
   "source": [
    "Again, the plotted information was saved in the current folder (filenames displayed on the screen)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a13e52d",
   "metadata": {},
   "source": [
    "----"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d265484e",
   "metadata": {},
   "source": [
    "## Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c660497c",
   "metadata": {},
   "source": [
    "The first part of this tutorial has shown some tools for structural modeling. However, the functions for appending or deleting atoms and changing their occupancy numbers weren't covered, as well the `visualizer_in` method. Please, check the [API documentation](../api.rst) for more details. On the other hand, the second part covered all functions usually used for experiment planning. If you develop new tools using **pyddt** classes, please contribute to the project on [GitHub](https://github.com/rafaela-felix/pyddt).\n",
    "\n",
    "In the last tutorial, we will analyze two Renninger scans and indicate how compatibility analysis is carried out using **pyddt**."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
